#!/usr/bin/env sh
#
# Host system requirements checker for Heiwa/Linux builds
# This POSIX-sh script is part of the "Magnolia" Auto-build System
#
# ISC License
#
# Copyright (c) 2021 Heiwa/Linux
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

export LC_ALL=POSIX; unalias -a

G='\033[0;32m' M='\033[1;35m' R='\033[1;31m' NC='\033[0m' # Some ANSI Color codes.

# Some messed and opinionated pretty function-outputs. Yes, shell-script is dirty.
msg() {     printf "${M}%s${NC} ${G}%b${NC} %b\n"    '*' "${1}" "${2}"; }
sym() {     printf "${R}%s${NC} %b ${M}->${NC} %b\n" '~' "${1}" "${2}"; }
die() { >&2 printf "${R}%s${NC} %b\n"          'error:' "${@}"; exit 1; }

cat << "EOF"

Checking host system requirements ..
-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
https://github.com/heiwalinux/heiwa

EOF

# Any shell (if the argument exist) or bash (for practical purpose with PoC).
if [ ! -z "${@}" ] && CRS="$(readlink /proc/${$}/exe)" && [ -x "$CRS" ]; then
    msg "$(basename "$CRS")" "$(command -v "$CRS")"
    if readlink -f /bin/sh | grep -Fqo "$CRS"; then
        sym "/bin/sh" "$CRS"
    fi
else
    if [ -x "$(command -v bash)" ]; then
        msg "bash" "$(bash --version | sed 1q | cut -d' ' -f4-5)"
        if readlink -f /bin/sh | grep -Fqo 'bash'; then
            sym "/bin/sh" "$(readlink -f /bin/sh)"
        else
            die "/bin/sh does not point to bash!"
        fi
    else
        die "bash not installed in this system!"
    fi
fi

# GNU's ld or LLVM's lld.
if [ -x "$(command -v ld)" ]; then
    if ld --version | grep -Fqo 'Free Software Foundation'; then
        msg "GNU ld" "$(ld --version | sed 1q | cut -d' ' -f3-)"
    elif ld --version | grep -Fqo 'LLD'; then
        msg "LLD" "$(ld --version | cut -d' ' -f2-)"
    fi
    if [ -L $(command -v ld) ]; then
        sym "$(command -v ld)" "$(readlink -f $(command -v ld))"
    fi
else
    die "ld (GNU binutils) nor lld (LLVM) not installed in this system!"
fi

# bison and yacc.
if [ -x "$(command -v bison)" ]; then
    msg "bison" "$(bison --version | sed 1q | cut -d' ' -f2-)"
fi
if [ -L "$(command -v yacc)" ]; then
    sym "$(command -v yacc)" "$(readlink -f $(command -v yacc))"
elif [ -x "$(command -v yacc)" ]; then
    sym "yacc" "$(yacc --version | sed 1q)"
else
    die "yacc not found nor installed in this system!"
fi

# bzip2.
if [ -x "$(command -v bzip2)" ]; then
    msg "bzip2" "$(bzip2 --version 2>&1 </dev/null | sed 1q | cut -d' ' -f8-)"
else
    die "bzip2 not installed in this system!"
fi

# cmake.
if [ -x "$(command -v cmake)" ]; then
    msg "cmake" "$(cmake --version | sed 1q | cut -d' ' -f3)"
else
    die "cmake not installed in this system!"
fi

# coreutils implementation and it's diff, find, grep, sed, tar.
if [ -x "$(command -v chown)" ] && chown --help 2>&1 | grep -Fqo 'BusyBox'; then
    msg "BusyBox" "$(busybox chown --help 2>&1 | sed 1q | cut -d' ' -f2-)"
    for X in diff find grep sed tar; do 
        if busybox --list 2>&1 | grep -Fqo "$X"; then
            sym "${X}" "$(command -v busybox) ${X}"
        else
            sym "${X}" "?"
            die "${X} not compiled in $(command -v busybox)!"
        fi
    done
elif [ -x "$(command -v chown)" ] && chown --help 2>&1 | grep -Fqo 'Toybox'; then
    msg "Toybox" "$(toybox chown --help 2>&1 | sed 1q | cut -d' ' -f2-)"
    for X in diff find grep sed tar; do 
        if toybox 2>&1 | grep -Fqo " ${X} "; then
            sym "${X}" "$(command -v toybox) ${X}"
        else
            sym "${X}" "?"
            die "${X} not compiled in $(command -v toybox)!"
        fi
    done
elif [ -x "$(command -v chown)" ]; then
    msg "coreutils" "$(chown --version | sed 1q | cut -d' ' -f2-)"
    # diffutils.
    if [ -x "$(command -v diff)" ]; then
        msg "diffutils" "$(diff --version | sed 1q | cut -d' ' -f2-)"
    else
        die "diffutils not installed in this system!"
    fi
    # findutils.
    if [ -x "$(command -v find)" ]; then
        msg "findutils" "$(find --version | sed 1q | cut -d' ' -f2-)"
    else
        die "findutils not installed in this system!"
    fi
    # grep.
    if [ -x "$(command -v grep)" ]; then
        msg "grep" "$(grep --version | sed 1q | cut -d' ' -f2-)"
    else
        die "grep not installed in this system!"
    fi
    # sed.
    if [ -x "$(command -v sed)" ]; then
        msg "sed" "$(sed --version | sed 1q | cut -d' ' -f2-)"
    else
        die "sed not installed in this system!"
    fi
    # tar.
    if [ -x "$(command -v tar)" ]; then
        msg "tar" "$(tar --version | sed 1q | cut -d' ' -f2-)"
    else
        die "tar not installed in this system!"
    fi
else
    die "There's no any coreutils implementation installed in this system!"
fi

# flex and lex.
if [ -x "$(command -v flex)" ]; then
    msg "flex" "$(flex --version | cut -d' ' -f2)"
fi
if [ -L "$(command -v lex)" ]; then
    sym "$(command -v lex)" "$(readlink -f $(command -v lex))"
elif [ -x "$(command -v lex)" ]; then
    sym "lex" "$(lex --version | sed 1q)"
else 
    die "lex not found nor installed in this system!"
fi

# GNU Awk and awk.
if [ -x "$(command -v gawk)" ]; then
    msg "GNU Awk" "$(gawk --version | sed 1q | cut -d' ' -f3-)"
fi
if [ -L "$(command -v awk)" ]; then
    sym "$(command -v awk)" "$(readlink -f $(command -v awk))"
elif [ -x "$(command -v awk)" ]; then
    sym "awk" "$(awk --version | sed 1q)"
else 
    die "awk not found nor installed in this system!"
fi

# GNU Wget
if [ -x "$(command -v wget)" ]; then
    msg "GNU Wget" "$(wget --version | sed 1q | cut -d' ' -f3-)"
else
    die "GNU Wget not installed in this system!"
fi

# GCC or Clang.
if [ -x "$(command -v cc)" ]; then
    if cc --version | grep -Fqo 'Free Software Foundation'; then
        CC='gcc' CXX='g++'
    elif cc --version | grep -Fqo 'clang version'; then
        CC='clang' CXX='clang++'
    else
        die "GCC nor Clang not installed in this system!"
    fi
    msg "$CC" "$("$CC" --version | sed 1q | cut -d' ' -f2-)"
    msg "$CXX" "$("$CXX" --version | sed 1q | cut -d' ' -f2-)"
    if [ -L "$(command -v cc)" ]; then
        sym "$(command -v cc)" "$(readlink -f $(command -v cc))"
    fi
else
    die "There's no compiler installed in this system!"
fi

# ldd (system's libc).
if [ -x "$(command -v ldd)" ]; then
    msg "ldd" "$(ldd --version | sed 1q | cut -d' ' -f2-)"
else
    die "There's no ldd (libc) found in this system!"
fi

# gzip.
if [ -x "$(command -v gzip)" ]; then
    msg "gzip" "$(gzip --version | sed 1q | cut -d' ' -f2)"
else
    die "gzip not installed in this system!"
fi

# Linux.
if grep -Fqo 'Linux' /proc/version; then
    msg "Linux" "$(cut -d' ' -f 3- /proc/version)"
else
    die "This system is not Linux!"
fi

# m4.
if [ -x "$(command -v m4)" ]; then
    msg "m4" "$(m4 --version | sed 1q | cut -d' ' -f2-)"
else
    die "m4 not installed in this system!"
fi

# Make.
if [ -x "$(command -v make)" ]; then
    msg "Make" "is $(make --version | sed 1q | cut -d' ' -f 1-)"
else
    die "Make not installed in this system!"
fi

# Perl.
if [ -x "$(command -v perl)" ]; then
    msg "Perl" "$(perl -v | grep -F 'version' | cut -d' ' -f9-)"
else
    die "Perl not installed in this system!"
fi

# Python3.
if [ -x "$(command -v python3)" ]; then
    msg "Python" "$(python3 --version | cut -d' ' -f 2-)"
else
    die "Python not installed in this system!"
fi

# makeinfo.
if [ -x "$(command -v makeinfo)" ]; then
    msg "makeinfo" "$(makeinfo --version | sed 1q | cut -d' ' -f2-)"
    if [ -L "$(command -v makeinfo)" ]; then
        sym "$(command -v makeinfo)" "$(readlink -f $(command -v makeinfo))"
    fi
else
    die "There's no makeinfo found nor installed in this system!"
fi

# xz.
if [ -x "$(command -v xz)" ]; then
    msg "xz" "$(xz --version | sed 1q | cut -d' ' -f2-)"
else
    die "xz not installed in this system!"
fi

# Compiler sanity check.
msg "$CC" "sanity check:\n"
if echo 'int main(){}' | "$CC" -x c++ - -march=native -O2 -pipe -w -g0 && [ -x a.out ]; then
    readelf -l a.out | grep --color=auto "Req.*ter"
    printf "\n${G}%s${NC} %s ${G}%s${NC}\n\n" '[' "OK" ']'
    rm -f a.out && exit $?
else
    printf "${R}%s${NC} %s ${R}%s${NC}\n\n" '[' "FAILED" ']'
    rm -f a.out && exit 1
fi

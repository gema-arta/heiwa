#!/usr/bin/env sh
export LC_ALL=POSIX; umask 022; . "$(dirname ${0})/heiwa.conf"; unalias -a

G="\033[1;32m" B="\033[1;34m" M="\033[1;35m" R="\033[1;31m" NC="\033[0m" \
g="\033[0;32m" b="\033[0;34m" m="\033[0;35m" r="\033[0;31m" # ANSI Colors.

msg() { printf "${G} > ${NC}${@}\n"; }
hea() { printf "\n${B}*${M}) ${NC}${@}\n"; }
die() { >&2 printf "${R}error:${NC} ${@}\n"; exit 1; }

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HEIWA="$(sh -c "echo ${TARGET_ROOTFS}")" # Target root (/) FileSystem.
CRS_TOOLS="clang1-tools"                 # Stage 1 Clang/LLVM Cross-Toolchain.
TMP_TOOLS="clang2-tools"                 # Stage 2 Clang/LLVM and Temporary Tools.
DISTFILES="$(dirname ${0})/distfiles"    # Distribution files (tarballs) path.
REPO_CORE="$(dirname ${0})/../syscore"   # System core local repository path.
KANRI_TMP="$(dirname ${0})/kanri"        # Kanri temporary directory path.
CCACHE_DIR="$(dirname ${0})/ccache"      # Ccache directory path.

export HEIWA CRS_TOOLS TMP_TOOLS DISTFILES REPO_CORE KANRI_TMP CCACHE_DIR

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[ "${EUID:-$(id -u)}" -ne 0 ] || die "Don't run as ${r}root${NC}!"
[ ! -x "$(command -v doas)" ] || PRIV="doas"
[ ! -x "$(command -v sudo)" ] || PRIV="sudo"
[ -n "$PRIV" ]                || die "${m}sudo${NC} nor ${m}doas${NC} not found!"

version_check() {
    hea "Checking host system requirements"
    if [ -x "$(dirname ${0})/../version-check" ]; then
        if ! "$(dirname ${0})/../version-check" x; then
            die "Failed to check host system requirements!"
        fi
    fi
}

toolchain_var() {
    hea "Setting up cross-toolchain environment"
    HST_TRIPLET="$(${CC:-gcc} -dumpmachine | sed 's|-[^-]*|-cross|')"
    DEF_CXFLAGS="-march=native ${CROSSFLAGS}"
    [ -z "$LOAD" ] || LOADAVG="-l${LOAD}"
    MAKEFLAGS="-j${JOBS:-2} ${LOADAVG}"
    
    case "$NATIVE_ARCH" in
        x86_64) GCC_MCPU="x86-64"
                TGT_LLVM="X86"
                TGT_ARCH="x86_64"
                TGT_TRIPLET="${TGT_ARCH}-pc-linux-musl"
                HEI_TRIPLET="${TGT_ARCH}-heiwa-linux-musl"
        ;;
        *)      die "Any architecture other than ${g}x86_64${NC} currently not implemented yet."
        ;;
    esac
    export HST_TRIPLET DEF_CXFLAGS LDFLAGS JOBS LOAD MAKEFLAGS GCC_MCPU TGT_LLVM TGT_ARCH TGT_TRIPLET HEI_TRIPLET
    
    msg "Detected ${m}NATIVE_ARCH${NC} as ${g}${TGT_ARCH}${NC}"
    for VAR in "$HST_TRIPLET"              \
               "$GCC_MCPU"                 \
               "$TGT_LLVM"                 \
               "$TGT_ARCH"                 \
               "$TGT_TRIPLET"              \
               "$HEI_TRIPLET"              \
               "${DEF_CXFLAGS} ${LDFLAGS}" \
               "$MAKEFLAGS"
    do  
        msg "${m}|${NC} ${VAR}"
    done
}

prepare_tools() {
    hea "Preparing cross-toolchain directories"
    if [ -n "$HEIWA" ]; then
        msg "Detected ${m}TARGET_ROOTFS${NC} as ${g}${HEIWA}${NC}"
        
        [ -d "$DISTFILES" ]            || { msg "Creating ${m}${DISTFILES}${NC}"  ; mkdir -pv "$DISTFILES"                   ; }
        [ -d "$KANRI_TMP" ]            || { msg "Creating ${m}${KANRI_TMP}${NC}"  ; mkdir -pv "$KANRI_TMP"                   ; }
        [ -d "$CCACHE_DIR" ]           || { msg "Creating ${m}${CCACHE_DIR}${NC}" ; mkdir -pv "$CCACHE_DIR"                  ; }
        [ -w "${HEIWA}/.." ]           ||   ASRT="$PRIV"                          # Run as root if "${HEIWA}/.." not writable.
        [ -d "${HEIWA}/${CRS_TOOLS}" ] || { msg "Creating ${m}${CRS_TOOLS}${NC}"  ; ${ASRT} mkdir -pv "${HEIWA}/${CRS_TOOLS}"; }
        [ -d "${HEIWA}/${TMP_TOOLS}" ] || { msg "Creating ${m}${TMP_TOOLS}${NC}"  ; ${ASRT} mkdir -pv "${HEIWA}/${TMP_TOOLS}"; }
        
        for DIR in "$CRS_TOOLS" "$TMP_TOOLS"; do
            if [ "$(readlink -f "/${DIR}")" != "${HEIWA}/${DIR}" ]; then
                msg "Symlink ${m}/${DIR}${NC} ${r}[forced]${NC}"
                if ! ${PRIV} ln -sfv "${HEIWA}/${DIR}" /; then
                    die "Failed to symlink ${m}/${DIR}${NC}!"
                fi
            fi
        done
        
        [ -L "/${CRS_TOOLS}/lib64" ]   || { msg "Merging ${m}lib{,64}${NC}"       ; ${ASRT} ln -sfv lib "/${CRS_TOOLS}/lib64"; }
        
        if [ -n "$ASRT" ]; then
            USER="${USER:-$(id -nu)}"
            for DIR in "$CRS_TOOLS" "$TMP_TOOLS"; do
                if [ "$(stat -c '%U' "${HEIWA}/${DIR}")" != "$USER" ]; then
                    msg "Changing the ${m}${DIR}${NC} owner to ${g}${USER}${NC} ${r}[forced]${NC}"
                    if ! ${ASRT} chown -hRv "$USER":"$USER" "${HEIWA}/${DIR}"; then
                        die "Failed to ${m}chown${NC} ${m}${DIR}${NC}!"
                    fi
                fi
            done
        fi
    else
        die "Please fill ${m}TARGET_ROOTFS${NC} in the ${m}heiwa.conf${NC}!"
    fi
}

#!/usr/bin/env sh
#
# The core of "Magnolia" Auto-build System
#
# ISC License
#
# Copyright (c) 2021 Heiwa/Linux
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#

# Speed-up script by using POSIX locale (and portability), safe execution, unalias all,
export LC_ALL=POSIX; set -e; unalias -a; umask 022 # and only writable by their owner.

# Disable hashing function for bash and zsh to avoid remember the PATH of executables.
for S in bash zsh; do [ "$(command -v "$S")" != "$CRS" ] || { set +h && break; }; done

# Export current working directory from the `build` script, and current running shell.
export CWD="$(cd -- "$(dirname ${0})"; pwd -P)" CRS="$(readlink -f "/proc/${$}/exe")"

G='\033[1;32m' B='\033[1;34m' M='\033[1;35m' R='\033[1;31m' NC='\033[0m' \
g='\033[0;32m' b='\033[0;34m' m='\033[0;35m' r='\033[0;31m' # Some ANSI Color codes.

# Some messed and opinionated pretty function-outputs. Yes, shell-script is dirty.
msg() {     printf " ${G}%s${NC} %b\n"             '>' "${@}"; } # Main message.
sub() {     printf " ${M}%s${NC} %b\n"             '•' "${@}"; } # Sub-message.
hea() {     printf "\n${B}%s${M}%s${NC} %b\n"  '*' ')' "${@}"; } # Header message.
die() { >&2 printf "${R}%s${NC} %b\n" 'error:' "${@}"; exit 1; } # Die message.
lst() {     printf "%s${r}%s${NC}%s %b\n"  '-' '~' '-' "${@}"; } # List message.
srg() {     printf '\n%s %b\n\n'           '¯\_(ツ)_/¯' "${@}"; } # Shrug message.

# Process interruption signal-trap. Triggered by: hang up, interrupt, and terminate.
trap "srg \"${r}process suddenly interrupted.${NC}\"; trap - INT; exit" HUP INT TERM

# Determine the authority delegator, only use `doas` or `sudo`, otherwise `die`.
[ "${EUID:-$(id -u)}" -ne 0 ] || die "Don't run as ${r}root${NC}!"
[ ! -x "$(command -v doas)" ] || AUD='doas'
[ ! -x "$(command -v sudo)" ] || AUD='sudo'
[ -x "$(command -v "$AUD")" ] || die "${m}sudo${NC} nor ${m}doas${NC} not found!"

# Load the configuration, if doesn't exist, copy from the default configuration.
[ -f "${CWD}/heiwa.conf" ] || install "${CWD}/heiwa.conf.def" "${CWD}/heiwa.conf"
   . "${CWD}/heiwa.conf"

# ~-~-~-~-~-~-~-~-~-~-~-~-~~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

# The target root (/) file system.
HEIWA="$("$CRS" -c "echo ${TARGET_ROOTFS}")"
# The identity for Stage-0 builds.
export CLANG1_TOOLS='clang1-tools'
# The identity for Stage-1 builds.
export CLANG2_TOOLS='clang2-tools'
# System core, the local "core" repository directory path.
SYSCORE_REPO="${CWD}/../syscore"
# Distribution files, the package tarballs directory path.
export DIST_DIR="${DIST_DIR:-${CWD}/distfiles}"
# Magnolia temporary directory path to build the packages.
MAGNOLIA_TMPDIR="${MAGNOLIA_TMPDIR:-${CWD}/magnolia}"
# Ccache directory path, used to build cross Clang/LLVM and Cmake.
export CCACHE_DIR="${CWD}/ccache"
# Magnolia cross @syscore set directory path, used as package recorder.
SYSCORE_SET_DIR="${CWD}/@syscore_cross"
# Magnolia staged directory name for staged installation.
STAGED_DIR='STELLATA'
# File name for the package build recipe, stellata.
BUILD_RECIPE='stellata'
# Valid tarball file-extensions, separated by "|".
TARBALL_EXTS='bz2|gz|xz'
# The tarball URLs (extended-)regular expressions.
URL_REGEXP="(ftp|http|https)://.*.(${TARBALL_EXTS})"

# ~-~-~-~-~-~-~-~-~-~-~-~-~~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

version_check()
{
    if ! "$CRS" "${CWD}/version-check" :; then
        die "Failed to check host system requirements."
    fi
}

toolchain_var()
{
    hea "Setting up toolchain environment"
    
    # Host cross-triplet, used to build cross-gcc.
    HOST_CROSS_TRIPLET="$(${CC:-cc} -dumpmachine | sed 's|-[^-]*|-cross|')"
    
    # Detect the native CPU architecture.
    case "$NATIVE_ARCH" in
        x86_64) TARGET_LLVM='X86'
                TARGET_MCPU='x86-64'
                TARGET_ARCH='x86_64'
                TARGET_MACHINE_TRIPLET="${TARGET_ARCH}-pc-linux-musl"
                TARGET_CUSTOM_TRIPLET="${TARGET_ARCH}-heiwa-linux-musl"
        ;;
        *)      die "Any architecture other than ${g}x86_64${NC} currently not implemented yet."
        ;;
    esac
    
    # Adjust PATH to Stage-1 and Stage-0 builds, ifluence sequence.
    PATH="/${CLANG2_TOOLS}/bin:/${CLANG1_TOOLS}/bin:${PATH}"
    
    # Detect the load-average then apply into makeflags,
    [ -z "$LOAD" ] || LOAD=" -l${LOAD}"
    # also parallel execution (jobs).
    MAKEFLAGS="-j${JOBS:-2}${LOAD}"
    
    # Now, export all required environment variables.
    export PATH \
           COMMON_FLAGS \
           CPPFLAGS \
           LDFLAGS \
           JOBS \
           LOAD \
           MAKEFLAGS \
           TARGET_LLVM \
           TARGET_MCPU \
           TARGET_ARCH \
           HOST_CROSS_TRIPLET \
           TARGET_MACHINE_TRIPLET \
           TARGET_CUSTOM_TRIPLET
    
    # Time to show-off, with awesome outputs :P
    msg "Detected ${m}NATIVE_ARCH${NC} as ${g}${TARGET_ARCH}${NC}" 
    for TC_ENVAR in "$TARGET_LLVM" \
                    "$TARGET_MCPU" \
                    "$TARGET_ARCH" \
                    "$HOST_CROSS_TRIPLET" \
                    "$TARGET_MACHINE_TRIPLET" \
                    "$TARGET_CUSTOM_TRIPLET" \
                    "$COMMON_FLAGS" \
                    "$CPPFLAGS" \
                    "$LDFLAGS" \
                    "$MAKEFLAGS"
    do
        sub "${m}|${NC} ${b}\"${NC}${TC_ENVAR}${b}\"${NC}"
    done
}

prepare_tools()
{
    hea "Preparing cross-toolchain directories"
    
    # $HEIWA = $TARGET_ROOTFS
    if [ -z "$HEIWA" ]; then
        die "Please fill ${m}\$TARGET_ROOTFS${NC} in the ${g}heiwa.conf${NC}!"
    fi
    
    msg "Detected ${m}TARGET_ROOTFS${NC} as ${g}${HEIWA}${NC}"
    
    # Prepare the local directories.
    for DIR in "$DIST_DIR" \
               "$MAGNOLIA_TMPDIR" \
               "$CCACHE_DIR" \
               "$SYSCORE_SET_DIR"
    do
        if [ ! -d "$DIR" ]; then
            msg "Creating ${m}$(echo "$DIR" | grep -oE '[^/]+$')${NC} directory"
            if ! install -dv "$DIR"; then
                die "Failed to create ${m}${DIR}${NC} directory."
            fi
        fi
    done
    
    # Detect the write-access of parent directory.
    [ -w "$(dirname "$HEIWA")" ] || RUN_AS="$AUD"
    
    # Prepare the target directories and the symlinks.
    for DIR in "$CLANG1_TOOLS" \
               "$CLANG2_TOOLS"
    do
        if [ ! -d "${HEIWA}/${DIR}" ]; then
            msg "Creating ${m}${DIR}${NC} directory into ${m}TARGET_ROOTFS${NC}"
            if ! ${RUN_AS} install -dv "${HEIWA}/${DIR}"; then
                die "Failed to create ${m}${DIR}${NC} directory into ${m}TARGET_ROOTFS${NC}."
            fi
        fi
        if [ "$(readlink -f "/${DIR}")" != "${HEIWA}/${DIR}" ]; then
            msg "Symlink ${m}/${DIR}${NC} ${r}[forced]${NC}"
            if ! ${AUD} ln -sfv "${HEIWA}/${DIR}" /; then
                die "Failed to symlink ${m}/${DIR}${NC}."
            fi
        fi
    done
    
    # Merge "lib64" and "lib" directories for Stage-0 builds.
    if [ ! -L "/${CLANG1_TOOLS}/lib64" ]; then
        msg "Merging ${m}/${CLANG1_TOOLS}/lib${NC}{,${m}64${NC}} directories"
        if ! ${RUN_AS} ln -sfv lib "/${CLANG1_TOOLS}/lib64"; then
            die "Failed to merge ${m}/${CLANG1_TOOLS}/lib{,64}${NC} directories."
        fi
    fi
    
    # Change the directories ownership, if created by "root" before.
    if [ -n "$RUN_AS" ]; then
        USER="${USER:-$(id -nu)}"
        for DIR in "$CLANG1_TOOLS" \
                   "$CLANG2_TOOLS"
        do
            if [ -x "$(command -v stat)" ]; then
                if [ "$(stat -c '%U' "${HEIWA}/${DIR}")" != "$USER" ]; then
                    msg "Changing ownership of ${m}${DIR}${NC} to ${g}${USER}${NC} ${r}[forced]${NC}"
                    if ! ${RUN_AS} chown -hRv "$USER":"$USER" "${HEIWA}/${DIR}"; then
                        die "Failed to ${g}chown${NC} ${m}${DIR}${NC} directory."
                    fi
                fi
            else
                die "Something wrong with ${g}stat${NC} command."
            fi
        done
    fi
}

host_magnolia()
{
    get_pkg_across_stage()
    {
        eval "echo \"\${PKGS_STAGE${BUILD_STAGE}}\""
    }
    
    get_pkg_informations()
    {
        for PKGS_INFO in Description \
                         URL \
                         Maintainer \
                         Packager
        do
            # Only show matched package information in the build recipe.
            if grep -Fqo "$PKGS_INFO" "${PKGS}/${BUILD_RECIPE}"; then
                sub "${r}${PKGS_INFO}${NC} $(sed -e '/Maintainer/s/, / </' \
                                                 -e '/Maintainer/s/$/>/' \
                                                 -e '/Packager/s/, / </' \
                                                 -e '/Packager/s/$/>/' \
                                                 -e '/</s/ at /@/' \
                                                 -e '/</s/ dot /./' \
                                                 -ne "s/# ${PKGS_INFO}: //p" \
                                                 "${PKGS}/${BUILD_RECIPE}")"
            fi
        done
    }
    
    construct_ready_pkgs()
    {
        # Note: Only use filter_flags() in the build recipe before the build() function!
        filter_flags()
        {
            msg "Filtering ${m}COMMON_FLAGS${NC} .."
            
            # Parse multiple flags from the arguments.
            for FLAGS in "${@}"; do
                if echo "$COMMON_FLAGS" | grep -Fqo "$FLAGS"; then

                    # The flags (extended-)regular expressions.
                    FLAGS_REGEXP="-[a-z]*${FLAGS}[=0-9Aa-zZ]* [ ]*"
                    
                    sub "${r}Filtered${NC} ${NC}$(echo "$COMMON_FLAGS" | grep -oE -- "${FLAGS_REGEXP}")"
                    export COMMON_FLAGS="$(echo "$COMMON_FLAGS" | sed -- "s|${FLAGS_REGEXP}||g")"
                fi
            done
        }
        
        rem_unpacked()
        {
            if [ -d "${MAGNOLIA_TMPDIR}/${UNPACKED_PKG}" ]; then
                if ! rm -rf "${MAGNOLIA_TMPDIR}/${UNPACKED_PKG}"; then
                    die "Failed to remove ${m}${UNPACKED_PKG}${NC} source directory."
                fi
            fi
        }
        
        # Set the toolchain to Clang/LLVM toolchain for Stage-1 builds and above.
        if [ "$BUILD_STAGE" -gt 0 ]; then
            msg "Using Clang/LLVM as main toolchain .."
            export CC='clang'
            export CXX='clang++'
            export LD='ld.lld'
            export CC_LD="${LD}"
            export CXX_LD="${LD}"
            export AR='llvm-ar'
            export AS='llvm-as'
            export NM='llvm-nm'
            export OBJCOPY='llvm-objcopy'
            export OBJDUMP='llvm-objdump'
            export RANLIB='llvm-ranlib'
            export READELF='llvm-readelf'
            export SIZE='llvm-size'
            export STRIP='llvm-strip'
            sub "${r}Applied${NC} Clang/LLVM toolchain"
        fi
        
        # Load and execute the build recipe.
        . "${PKGS}/${BUILD_RECIPE}"
        
        # Ensure the build() function exist in the build recipe.
        if [ -z "$(command -v build)" ]; then
            die "Please add ${m}build()${NC} function in the ${g}${PKGS}${NC} build recipe!"
        fi
        
        # Ensure the $source function exist in the build recipe.
        if [ -z "$source" ]; then
            die "There's no sources to fetch. Please set ${m}\$source${NC} in the ${g}${PKGS}${NC} build recipe!"
        fi
        
        # Fetch the package tarballs and verify digest.
        msg "Fetching source .."
        # Parse all multiple tarball URLs.
        for SOURCE in ${source}; do
            # Ensure the tarball file-extensions are all valid.
            if ! echo "$SOURCE" | grep -qwE "$TARBALL_EXTS"; then
                sub "${r}Unknown${NC} ${SOURCE} ${r}!=${NC} (${TARBALL_EXTS})"
                die "Invalid tarball file-extensions. Please fix ${m}\$source${NC} in the ${g}${PKGS}${NC} build recipe!"
            fi
            # Determine the URL first then apply as URL_SOURCE.
            if echo "$SOURCE" | grep -qoE "$URL_REGEXP"; then
                URL_SOURCE="$SOURCE"
            fi
            # Determine the correct tarball file-name. Because,
            # some tarball just using version as their file-name.
            if echo "$SOURCE" | grep -vqE "$URL_REGEXP"; then
                TARBALL="$SOURCE"
                # The SOURCE loop counter. Determine the main tarball.
                if N_LOOP="$((${N_LOOP:-1}+1))" ; [ "$N_LOOP" -eq 2 ]; then
                    MAIN_TARBALL="$TARBALL"
                    # The correct unpacked directory name, 
                    # for multiple packages compability with single tarball.
                    UNPACKED_PKG="${name}-${version}"
                fi
                if [ -d "$DIST_DIR" ] && cd -- "$DIST_DIR"; then
                    # Force fetch the tarball with exceptions,
                    # check the internet connection first.
                    if wget -q --no-hsts --spider 1.1.1.1; then
                        # Ensure the tarball downloadable,
                        if ! wget -nv --no-hsts --spider "$URL_SOURCE"; then
                            die "Something wrong when checking the URL."
                        fi
                        # then fetch the tarball if the URL valid.
                        if ! wget -Ncq -w 3 -t 3 --no-hsts --show-progress -O "$TARBALL" "$URL_SOURCE"; then
                            die "Failed to fetch ${m}${TARBALL}${NC} archive."
                        fi
                    else
                        # Only print this when fetching the first tarball.
                        if [ "$N_LOOP" -eq 2 ]; then
                            sub "${r}No internet connection${NC}"
                            srg "fetching skipped."
                        fi
                    fi
                    # Verify the tarballs existence (fetched succesfully).
                    if [ -f "$TARBALL" ]; then
                        sub "${r}Fetched${NC} ${DIST_DIR}/${TARBALL}"
                    else
                        die "The ${m}${TARBALL}${NC} archive not found. Has it been fetched successfully?"
                    fi
                    # Verify digest, only reads SHA256 if the $sha256 variable exist in the build recipe.
                    if [ -n "$sha256" ]; then
                        sub "${r}Checksum${NC} ${g}${TARBALL}${NC}"
                        if ! echo "$sha256" | grep -F "$TARBALL" | sha256sum -c --quiet >/dev/null; then
                            die "Failed to check ${m}${TARBALL}${NC} digest."
                        fi
                    fi
                else
                    die "There's no ${m}${DIST_DIR}${NC} directory."
                fi
            fi
        done
        
        # Unpack the main tarball, build, and install.
        if [ -d "$MAGNOLIA_TMPDIR" ] && cd -- "$MAGNOLIA_TMPDIR"; then
            # First, determine the main tarball file-extensions.
            COMP_ALG="$(echo "$MAIN_TARBALL" | grep -oE "$TARBALL_EXTS")"
            if [ -z "$COMP_ALG" ]; then
                die "Invalid tarball file-extensions (equivalent to compression algorithm)."
            fi
            # Now, unpack the main tarball. Force delete the existing directory.
            msg "Unpacking ${m}${COMP_ALG}${NC} archive .."
            if rem_unpacked ; tar --auto-compress -xpf "${DIST_DIR}/${MAIN_TARBALL}"; then
                # Ensure the unpacked directory name matched with package name and version.
                UNPACKED_DIR="$(find -maxdepth 1 -type d -iname "*${version}*" -printf '%f\n' 2>/dev/null | sed 1q)"
                if [ "$UNPACKED_DIR" != "$UNPACKED_PKG" ]; then
                    if mv -f "$UNPACKED_DIR" "$UNPACKED_PKG"; then
                        sub "${r}Renamed${NC} ${UNPACKED_DIR} ${m}->${NC} ${UNPACKED_PKG}"
                    fi
                fi
                sub "${r}Unpacked${NC} ${MAGNOLIA_TMPDIR}/${UNPACKED_PKG}"
            else
                die "Failed to unpack ${m}${MAIN_TARBALL}${NC} archive."
            fi
            # It's time to build the package.
            msg "Building ${g}${PKGS}${NC} .."
            # Pre-build process.
            # Export the COMMON_FLAGS as both CFLAGS and CXXFLAGS.
            export CFLAGS="$COMMON_FLAGS" CXXFLAGS="$COMMON_FLAGS"
            # Export the staged directory for staged installation.
            export PKG="${PWD:-$(pwd -P)}/${UNPACKED_PKG}/${STAGED_DIR}"
            # Force copy existing installed GNU info `dir` index. Why?
            # The reason is to update index by package native-builder.
            for DIR_INFO in $(find "$HEIWA" -type f -name 'dir' -path '*/info/*' 2>/dev/null); do
                DIRNAME="$(dirname "$DIR_INFO" | sed "s|${HEIWA}||")"
                if [ -n "$DIRNAME" ] && install -d "${PKG}/${DIRNAME}"; then
                    install -t "${PKG}/${DIRNAME}/" "$DIR_INFO"
                fi
            done
            # Trace the build timer start (in seconds).
            ATIME="$(date +%s)"
            # Run the build process with pretty trace-logs.
            {   echo "------------[ cut here ]------------"
                if build 2>&1; then
                    STATS='success'
                else
                    STATS='failure'
                fi
                echo "---[ build $STATS @ $(date +%s) ]---"
            } | tee "${PKG}_BUILD.log"
            # The build timer end, get from the last line of build log.
            ZTIME="$(sed '$!d' "${PKG}_BUILD.log" | grep -oE '[0-9]+')"
            # Ensure the package successfully built, otherwise `die`.
            if ! grep -Fqo 'build success @ ' "${PKG}_BUILD.log"; then
                die "Failed to build. Log: ${g}${PKG}_BUILD.log${NC}"
            fi
            # Post-build process.
            if [ -d "$PKG" ] && cd -- "$PKG"; then
                # Remove all useless ".la" (libtool) files.
                if [ "${rm_la:-yes}" != 'no' ]; then
                    msg "Removing useless ${m}.la${NC} files .."
                    for LA in $(find -name '*.la' 2>/dev/null | cut -d/ -f2-); do
                        rm -f "$LA" && lst "$LA"
                    done
                fi
                # Strip all unneeded symbols from binaries.
                if [ "${strip:-yes}" != 'no' ]; then
                    msg "Stripping unneeded symbols .."
                    # Copy the `llvm-strip` or `strip` to parent directory, to avoid stripping the binary itself.
                    for STRIP in llvm-strip strip; do
                        if [ -x "$(command -v "$STRIP")" ]; then
                            if install -t ../ $(command -v "$STRIP"); then
                                strip_unneeded() { ../"$STRIP" --strip-unneeded "${@}"; }
                                break
                            fi
                        fi
                    done
                    if [ -n "$(command -v strip_unneeded)" ]; then
                        for LIB in $(find -type f \( -name '*.a' -o -name '*.so*' \) 2>/dev/null | cut -d/ -f2-); do
                            { strip_unneeded "$LIB" 2>&1 | cut -d: -f2-; } && lst "$LIB"
                        done
                        for BIN in $(find -type f \( -path '*/libexec/*' -o -path '*/*bin/*' \) -exec grep -IL . "{}" \; 2>/dev/null | cut -d/ -f2-); do
                            { strip_unneeded "$BIN" 2>&1 | cut -d: -f2-; } && lst "$BIN"
                        done
                        rm -f ../"$STRIP"
                    fi
                fi
                msg "Built complete and installed into ${m}${UNPACKED_PKG}/${STAGED_DIR}${NC} staged directory"
                # Install files from staged directory into correct location.
                msg "Installing into correct location .."
                for FILE in $(find -type f 2>/dev/null | cut -d/ -f2-); do
                    DIRNAME="$(dirname "$FILE")"
                    # Create the parent directory of file first then install.
                    if [ -n "$DIRNAME" ] && install -d "${HEIWA}/${DIRNAME}"; then
                        if install -t "${HEIWA}/${DIRNAME}/" "$FILE"; then
                            # Exclude GNU info `dir` index from being logged.
                            if [ "$(basename "$FILE")" != 'dir' ]; then
                                lst "${HEIWA}/${FILE}"
                                # Below will record installed files of the package.
                                echo "${HEIWA}/${FILE}" >> "${SYSCORE_SET_DIR}/${BUILD_STAGE}@${UNPACKED_PKG}"
                            fi
                        else
                            die "Failed to install ${m}${FILE}${NC} into correct location."
                        fi
                    fi
                done
                # Re-create symlinks from staged directory into correct location.
                for LINK in $(find -L -xtype l 2>/dev/null | cut -d/ -f2-); do
                    DIRNAME="$(dirname "$LINK")"
                    # Create the parent directory of file first, then symlinks.
                    if [ -n "$DIRNAME" ] && install -d "${HEIWA}/${DIRNAME}"; then
                        if ln -sf "$(readlink "$LINK")" "${HEIWA}/${DIRNAME}/$(basename "$LINK")"; then
                            lst "${HEIWA}/${LINK}"
                            # Below will record installed files of the package.
                            echo "${HEIWA}/${LINK}" >> "${SYSCORE_SET_DIR}/${BUILD_STAGE}@${UNPACKED_PKG}"
                        else
                            die "Failed to create symlink ${m}${LINK}${NC} to correct location."
                        fi
                    fi
                done
                msg "The ${g}${PKGS}${NC} successfully merged and recorded into cross ${m}@syscore${NC} set"
                # Calculate and show the build-time.
                BUILD_TIME="$((ZTIME-ATIME))s / ~$(((ZTIME-ATIME)/60))m / ~$(((ZTIME-ATIME)/3600))h"
                if [ -n "$BUILD_TIME" ]; then
                    sub "${r}Build-time${NC} ${BUILD_TIME}"
                    # Below will record build-time of the package.
                    echo "$BUILD_TIME" > "${SYSCORE_SET_DIR}/${BUILD_STAGE}@${UNPACKED_PKG}.time"
                fi
                # Calculate and show the build-size.
                BUILD_SIZE="$(du -sh "$PKG" | cut -f1)" 
                if [ -n "$BUILD_SIZE" ] ; then
                    sub "${r}Build-size${NC} ${BUILD_SIZE}"
                    # Below will record build-size of the package.
                    echo "$BUILD_SIZE" > "${SYSCORE_SET_DIR}/${BUILD_STAGE}@${UNPACKED_PKG}.size"
                fi
                # Now, remove the unpacked package directory source.
                msg "Cleaning up ${g}${PKGS}${NC} directory source .."
                rem_unpacked
                msg "All done, construct completed without any errors"
            else
                die "Failed on post-build process. The ${m}${PKG}${NC} directory not created."
            fi
        else
            die "There's no ${m}${MAGNOLIA_TMPDIR}${NC} directory."
        fi
    }
    
    # Determine the build-stage level, failed if not specified or greater than Stage-1.
    if [ -z "$BUILD_STAGE" ] || [ "$BUILD_STAGE" -gt 1 ]; then
        die "Failed to run \`${m}host_magnolia${NC} ${g}${BUILD_STAGE}${NC}\`. Please correct argument in the ${g}build${NC}!"
    fi
    
    export BUILD_STAGE
    
    # Verify and construct packages across build-stage.
    hea "Verifying ${m}Stage-${BUILD_STAGE}${NC} packages"
    if [ -d "$SYSCORE_REPO" ] && cd -- "$SYSCORE_REPO"; then
        # Ensure there are packages to construct.
        if [ -z "$(get_pkg_across_stage)" ]; then
            die "There's no package to construct. Please fill ${m}\$PKGS_STAGE${BUILD_STAGE}${NC} in the ${g}heiwa.conf${NC}!"
        fi
        # Parse all packages which want to construct.
        for PKGS in $(get_pkg_across_stage); do
            # Ensure the package build recipe is exist.
            if [ -f "${PKGS}/${BUILD_RECIPE}" ]; then
                msg "Found the build recipe for ${g}${PKGS}${NC}"
                # Run the package-informator in the subshell for safety reason.
                (get_pkg_informations)
                # Check if the package already installed and recorded in the cross @syscore set.
                msg "Is ${g}${PKGS}${NC} already installed?"
                IPKG="$(find "$SYSCORE_SET_DIR" -type f -iregex ".*/${BUILD_STAGE}@${PKGS}-[0-9].*" -printf '%f\n' 2>/dev/null | sed 1q)"
                if [ -f "${SYSCORE_SET_DIR}/${IPKG}" ]; then
                    sub "${g}Yes${NC}, version ${m}${IPKG##${BUILD_STAGE}@${PKGS}-}${NC}"
                else
                    sub "${r}None${NC}"
                    # List all ready-to-build packages.
                    READY_PKGS="${READY_PKGS} ${PKGS} "
                fi
            else
                die "There's no build recipe for ${m}${PKGS}${NC}!"
            fi
        done
        # Construct all ready-to-build packages.
        if [ -n "$READY_PKGS" ]; then
            # Parse all ready-to-build packages.
            for PKGS in ${READY_PKGS}; do
                hea "Constructing ${m}Stage-${BUILD_STAGE}${NC} ${g}${PKGS}${NC}"
                # Export patches and files directories of the packages if exist.
                for DIR in patches files; do
                    if [ -d "${PKGS}/${DIR}" ]; then
                        export "$DIR"="${SYSCORE_REPO}/${PKGS}/${DIR}"
                    fi
                done
                # Run the package-constructor in the subshell for safety reason.
                (construct_ready_pkgs)
            done
            # Prevent multiple packages across build-stage from being preserved.
            unset READY_PKGS
        else
            srg "there's no package to construct."
        fi
    else
        die "There's no ${m}${SYSCORE_REPO}${NC} directory."
    fi
}

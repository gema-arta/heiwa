#!/usr/bin/env sh
export LC_ALL=POSIX CWD="$(dirname ${0})" CRS="$(readlink /proc/${$}/exe)"

G="\033[1;32m" B="\033[1;34m" M="\033[1;35m" R="\033[1;31m" NC="\033[0m" \
g="\033[0;32m" b="\033[0;34m" m="\033[0;35m" r="\033[0;31m" # ANSI Colors.

msg() {     printf " ${G}%s${NC} %b\n"             '>' "${@}"; }
hea() {     printf "\n${B}%s${M}%s${NC} %b\n"  '*' ')' "${@}"; }
die() { >&2 printf "${R}%s${NC} %b\n" 'error:' "${@}"; exit 1; }

[ "${EUID:-$(id -u)}" -ne 0 ] || die "Don't run as ${r}root${NC}!"
[ ! -x "$(command -v doas)" ] || PRIV="doas"
[ ! -x "$(command -v sudo)" ] || PRIV="sudo"
[ -n "$PRIV" ]                || die "${m}sudo${NC} nor ${m}doas${NC} not found!"

if [ ! -f "${CWD}/heiwa.conf" ]; then
    cp -f "${CWD}/heiwa.conf.default" "${CWD}/heiwa.conf"
fi; . "${CWD}/heiwa.conf"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HEIWA="$("$CRS" -c "echo ${TARGET_ROOTFS}")" # Target root (/) FileSystem.
CRS_TOOLS="clang1-tools"                     # Stage 1 Clang/LLVM Cross-Toolchain.
TMP_TOOLS="clang2-tools"                     # Stage 2 Clang/LLVM and Temporary Tools.
DISTFILES="${CWD}/distfiles"                 # Distribution files (tarballs) path.
REPO_CORE="${CWD}/../syscore"                # System core local repository path.
KANRI_TMP="${CWD}/kanri"                     # Kanri temporary directory path.
CCACHE_DIR="${CWD}/ccache"                   # Ccache directory path.

export HEIWA CRS_TOOLS TMP_TOOLS DISTFILES REPO_CORE KANRI_TMP CCACHE_DIR

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

version_check() {
    hea "Checking host system requirements"
    if [ -x "${CWD}/../version-check" ]; then
        if ! "$CRS" "${CWD}/../version-check" x; then
            die "Failed to check host system requirements!"
        fi
    fi
}

toolchain_var() {
    hea "Setting up cross-toolchain environment"
    HST_TRIPLET="$(${CC:-gcc} -dumpmachine | sed 's|-[^-]*|-cross|')"
    
    [ -z "$LOAD" ] || LOADAVG=" -l${LOAD}"
    MAKEFLAGS="-j${JOBS:-2}${LOADAVG}"
    
    case "$NATIVE_ARCH" in
        x86_64) GCC_MCPU="x86-64"
                TGT_LLVM="X86"
                TGT_ARCH="x86_64"
                TGT_TRIPLET="${TGT_ARCH}-pc-linux-musl"
                HEI_TRIPLET="${TGT_ARCH}-heiwa-linux-musl"
        ;;
        *)      die "Any architecture other than ${g}x86_64${NC} currently not implemented yet."
        ;;
    esac
    export HST_TRIPLET CROSSFLAGS LDFLAGS JOBS LOAD MAKEFLAGS GCC_MCPU TGT_LLVM TGT_ARCH TGT_TRIPLET HEI_TRIPLET
    
    msg "Detected ${m}NATIVE_ARCH${NC} as ${g}${TGT_ARCH}${NC}"
    for VAR in "$HST_TRIPLET"             \
               "$GCC_MCPU"                \
               "$TGT_LLVM"                \
               "$TGT_ARCH"                \
               "$TGT_TRIPLET"             \
               "$HEI_TRIPLET"             \
               "${CROSSFLAGS} ${LDFLAGS}" \
               "$MAKEFLAGS"
    do  
        msg "${m}|${NC} ${b}\"${NC}${VAR}${b}\"${NC}"
    done
}

prepare_tools() {
    hea "Preparing cross-toolchain directories"
    if [ -n "$HEIWA" ]; then
        msg "Detected ${m}TARGET_ROOTFS${NC} as ${g}${HEIWA}${NC}"
        
        for DIR in "$DISTFILES" "$KANRI_TMP" "$CCACHE_DIR"; do
            if [ ! -d "$DIR" ]; then
                msg "Creating ${m}${DIR}${NC}"
                if ! mkdir -pv "$DIR"; then
                    die "Failed to create ${m}${DIR}${NC}!"
                fi
            fi
        done
        
        [ -w "$(dirname "$HEIWA")" ] || ASRT="$PRIV"
        
        for DIR in "$CRS_TOOLS" "$TMP_TOOLS"; do
            if [ ! -d "${HEIWA}/${DIR}" ]; then
                msg "Creating ${m}${DIR}${NC}"
                if ! ${ASRT} mkdir -pv "${HEIWA}/${DIR}"; then
                    die "Failed to create ${m}${DIR}${NC}!"
                fi
            fi
            if [ "$(readlink -f "/${DIR}")" != "${HEIWA}/${DIR}" ]; then
                msg "Symlink ${m}/${DIR}${NC} ${r}[forced]${NC}"
                if ! ${PRIV} ln -sfv "${HEIWA}/${DIR}" /; then
                    die "Failed to symlink ${m}/${DIR}${NC}!"
                fi
            fi
        done
        
        if [ ! -L "/${CRS_TOOLS}/lib64" ]; then
            msg "Merging ${m}/${CRS_TOOLS}/lib{,64}${NC}"
            if ! ${ASRT} ln -sfv lib "/${CRS_TOOLS}/lib64"; then
                die "Failed to merge ${m}/${CRS_TOOLS}/lib{,64}${NC}"
            fi
        fi
        
        if [ -n "$ASRT" ]; then
            USER="${USER:-$(id -nu)}"
            for DIR in "$CRS_TOOLS" "$TMP_TOOLS"; do
                if [ "$(stat -c '%U' "${HEIWA}/${DIR}")" != "$USER" ]; then
                    msg "Changing the ${m}${DIR}${NC} owner to ${g}${USER}${NC} ${r}[forced]${NC}"
                    if ! ${ASRT} chown -hRv "$USER":"$USER" "${HEIWA}/${DIR}"; then
                        die "Failed to ${m}chown${NC} ${m}${DIR}${NC}!"
                    fi
                fi
            done
        fi
    else
        die "Please fill ${m}TARGET_ROOTFS${NC} in the ${m}heiwa.conf${NC}!"
    fi
}
